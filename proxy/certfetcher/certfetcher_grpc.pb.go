// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: certfetcher.proto

package certfetcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CertFetcher_Get_FullMethodName = "/CertFetcher.CertFetcher/Get"
)

// CertFetcherClient is the client API for CertFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertFetcherClient interface {
	// Fetch a certificate from a target by initiating a TLS connection.
	// This intentionally does NOT validate the chain-of-trust for the
	// certificate. It's meant to give a way to discover the certificate
	// used by the target in cases where only the proxy has direct network
	// connectivity to the target.
	Get(ctx context.Context, in *GetCertRequest, opts ...grpc.CallOption) (*GetCertReply, error)
}

type certFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewCertFetcherClient(cc grpc.ClientConnInterface) CertFetcherClient {
	return &certFetcherClient{cc}
}

func (c *certFetcherClient) Get(ctx context.Context, in *GetCertRequest, opts ...grpc.CallOption) (*GetCertReply, error) {
	out := new(GetCertReply)
	err := c.cc.Invoke(ctx, CertFetcher_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertFetcherServer is the server API for CertFetcher service.
// All implementations should embed UnimplementedCertFetcherServer
// for forward compatibility
type CertFetcherServer interface {
	// Fetch a certificate from a target by initiating a TLS connection.
	// This intentionally does NOT validate the chain-of-trust for the
	// certificate. It's meant to give a way to discover the certificate
	// used by the target in cases where only the proxy has direct network
	// connectivity to the target.
	Get(context.Context, *GetCertRequest) (*GetCertReply, error)
}

// UnimplementedCertFetcherServer should be embedded to have forward compatible implementations.
type UnimplementedCertFetcherServer struct {
}

func (UnimplementedCertFetcherServer) Get(context.Context, *GetCertRequest) (*GetCertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeCertFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertFetcherServer will
// result in compilation errors.
type UnsafeCertFetcherServer interface {
	mustEmbedUnimplementedCertFetcherServer()
}

func RegisterCertFetcherServer(s grpc.ServiceRegistrar, srv CertFetcherServer) {
	s.RegisterService(&CertFetcher_ServiceDesc, srv)
}

func _CertFetcher_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertFetcherServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertFetcher_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertFetcherServer).Get(ctx, req.(*GetCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertFetcher_ServiceDesc is the grpc.ServiceDesc for CertFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CertFetcher.CertFetcher",
	HandlerType: (*CertFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CertFetcher_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certfetcher.proto",
}
